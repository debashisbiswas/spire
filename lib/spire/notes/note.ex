defmodule Spire.Notes.Note do
  use Ecto.Schema
  import Ecto.Changeset
  import Ecto.Query
  alias Spire.Notes.Tag

  schema "notes" do
    field :content, :string

    many_to_many :tags, Tag,
      join_through: "notes_tags",
      on_replace: :delete

    timestamps(type: :utc_datetime)
  end

  def changeset(note, attrs \\ %{}) do
    note
    |> cast(attrs, [:content])
    |> validate_required([:content])
    |> put_assoc(:tags, parse_tags(attrs))
  end

  defp parse_tags(attrs) do
    content = attrs["content"] || ""

    tag_regex = ~r/#(\w*[0-9a-zA-Z]+\w*[0-9a-zA-Z])/

    Regex.scan(tag_regex, content, capture: :all_but_first)
    |> List.flatten()
    |> insert_and_get_all()
  end

  defp insert_and_get_all([]), do: []

  defp insert_and_get_all(names) do
    timestamp = DateTime.utc_now() |> DateTime.truncate(:second)
    placeholders = %{timestamp: timestamp}

    maps =
      Enum.map(
        names,
        &%{
          name: &1,
          # These must be included as they won't be generated by insert_all.
          inserted_at: {:placeholder, :timestamp},
          updated_at: {:placeholder, :timestamp}
        }
      )

    Spire.Repo.insert_all(
      Tag,
      maps,
      placeholders: placeholders,
      on_conflict: :nothing
    )

    Spire.Repo.all(from t in Tag, where: t.name in ^names)
  end
end
